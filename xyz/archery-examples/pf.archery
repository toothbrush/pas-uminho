pattern ClientServer()
elements
  element Server() 
  	act
  	  rreq, sres, cres;
    proc Server() = 
      rreq.cres.sres.Server();
    interface
      in rreq;
      out sres;
  element Client()
  	act
  	  prcs, sreq, rres;
    proc 
      Client() = prcs.sreq.rres.Client();
    interface
      in rres;
      out sreq;
end


pattern PipeFilter()
elements
element Filter()
  act 
    receive, transform, send;
  proc Filter() = 
    receive.transform.send.Filter(); 
  interface
    in receive;
    out send;
element Pipe()
    act
      accept, forward;
    proc Pipe() =
      accept.forward.Pipe();
  interface
    in accept;
    out forward; 
end

architecture pf = ClientServer() 
instances
  architecture s = PipeFilter() 
    instances
      f1 = Filter(); f2 = Filter(); p1 = Pipe();
    attachments
      from f1.send to p1.accept; 
      from p1.forward to f2.receive;
    interface
      f1.receive as rreq; 
      f2.send as sres;
  end 
  c1 = Client();
  c2 = Client();
attachments
  from c1.sreq to s.rreq;
  from c2.sreq to s.rreq;
  from s.sres to c1.rres;
  from s.sres to c2.rres;    
end
