pattern ClientServer()
elements
element Server() 
  act 
		rreq, arreq, sres, asres, cres;
  proc Server() = 
    rreq.arreq.cres.sres.asres.Server();
  interface
  in rreq; 
  out arreq;
  out sres;
	in asres;
element Client()
	act 
	  prcs, sreq, asreq, rres, arres;
  proc Client() = prcs.sreq.asreq.rres.arres.Client();
  interface
    out sreq;
		in asreq;
    in rres;
		out arres;
end

pattern PipeFilter()
elements
element Filter()
  act rec, arec, trans, send, asend;
  proc Filter() = 
    rec.arec.trans.send.asend.Filter(); 
  interface
    in rec;
	  out arec;
    out send;
    in asend;
element Pipe()
  act accept, forward, aaccept, aforward;
  proc Pipe() =
      accept.aaccept.forward.aforward.Pipe();
  interface
    in accept;
		out aaccept;
    out forward;
    in aforward; 
end

architecture pf = ClientServer() 
instances
  architecture s = PipeFilter() 
    instances
      f1 = Filter(); f2 = Filter(); p1 = Pipe();
    attachments
      from f1.send to p1.accept; 
      from p1.aaccept to f1.asend; 
      from p1.forward to f2.rec;
      from f2.arec to p1.aforward;
    interface
      f1.rec as rreq; 
      f1.arec as arreq; 
      f2.send as sres;
      f2.asend as asres;
  end 
  c1 = Client();
  c2 = Client();
attachments
  from c1.sreq to s.rreq;
  from s.arreq to c1.asreq;
  from c2.sreq to s.rreq;
  from s.arreq to c2.asreq;
  from s.sres to c1.rres;
  from c1.arres to s.asres;
  from s.sres to c2.rres;  
  from c2.arres to s.asres;  
end
