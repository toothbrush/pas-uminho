pattern ClientServer()
elements
  element Server() 
  	act
  	  rreq, sres;
			cres;
			rLB, sLB;
    proc Server() = rLB.rreq.cres.sres.sLB.Server();
    interface
      in rreq;
      out sres;
			out rLB;
			in sLB;
  element Client()
  	act
  	  prcs, sreq, rres;
    proc 
      Client() = prcs.sreq.rres.Client();
    interface
      in rres;
      out sreq;
end

pattern LoadBalancer()
elements
	element LB(x:Nat)
		map NRequests : Pos;
		eqn NRequests = 2;
		act
			rreq, sreq, rres, sres;
    proc LB(n:Nat=x) =
			((n <= NRequests) -> rreq.sreq.LB(n+1)) + (n>0) -> rres.sres.LB(n-1);
		interface
			in rreq;
			in rres;
			out sreq;
			out sres;
end

architecture pf = ClientServer() 
instances
  architecture lb = LoadBalancer()
    instances
      lb = LB(0);
    interface
      lb.rreq as rreq; 
      lb.sreq as sreq; 
      lb.rres as rres;
      lb.sres as sres;
  end 
  c1 = Client();
  c2 = Client();
  c3 = Client();
	s1 = Server();
	s2 = Server();
attachments
  from c1.sreq to s1.rreq;
  from c1.sreq to s2.rreq;
  from c2.sreq to s1.rreq;
  from c2.sreq to s2.rreq;
  from c3.sreq to s1.rreq;
  from c3.sreq to s2.rreq;
  from s1.sres to c1.rres;
  from s2.sres to c1.rres;
  from s1.sres to c2.rres;
  from s2.sres to c2.rres;
  from s1.sres to c3.rres;
  from s2.sres to c3.rres;
	from s1.rLB to lb.rreq;
	from s2.rLB to lb.rreq;
	from lb.sres to s1.sLB;
	from lb.sres to s2.sLB;
end
