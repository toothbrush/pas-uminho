map
	NClients, NServers : Pos;

% =============================================================================

eqn
	NClients = 1;
	NServers = 1;

% =============================================================================

act
	clientRequest, serverRequest, serverResponse, clientResponse : Pos;
	sendRequest, receiveRequest, sendResponse, receiveResponse : Pos;
	process, wait, idle;
	sReq,rReq,sRes,rRes : Pos;
	startProcess, rproc, sproc : Pos;

% =============================================================================

proc
	% XYZNews System
	System = comm({
			     sendRequest|clientRequest   -> sReq
			, clientResponse|receiveResponse -> rRes
			,  serverRequest|receiveRequest  -> rReq
			,   sendResponse|serverResponse  -> sRes},
		(Network || LoadBalancer(true,0) || ParallelServers(NServers)));

	% ---------------------------------------------------------------------------

	% Counts the number of connections/requests, defines the number of servers
	% online and their operating mode
	LoadBalancer(mm : Bool, nServers : Nat) =
		  ReceiveRequest(mm, nServers)
		+ SendResponse(mm, nServers);

	ReceiveRequest(mm : Bool, nServers : Nat) =
		sum cid : Pos . (cid <= NClients) -> clientRequest(cid).serverRequest(cid).LoadBalancer(mm, nServers);

	SendResponse(mm : Bool, nServers : Nat) =
		sum cid : Pos . (cid <= NClients) -> (serverResponse(cid).clientResponse(cid)).LoadBalancer(mm, nServers);

	% The network (receives connections/requests from clients and send them the
	% responses)
	Network = ParallelClients(NClients);

	% ---------------------------------------------------------------------------

	% Create a given number of servers in parallel
	ParallelServers(n:Pos) = (n>1) -> (ServerProcess(n) || ParallelServers(Int2Pos(n-1))) <> ServerProcess(1);
	
	ServerProcess(n:Pos) = Server(n,0,[]) || Process(n);

	% Receives requests (text or media mode) and provides the responses
	Server(id:Pos,len:Nat,requests:List(Pos)) = sum cid : Pos . (cid <= NClients) ->
		( startProcess(head(requests)).Server(id,len,requests)
		+ sendResponse(cid).Server(id,len,tail(requests))
		+ receiveRequest(cid).Server(id,len,requests<|cid)
		);
		% receiveRequest(cid).process.sendResponse(cid).Server(id);

	Process(id:Pos) = sum cid : Pos . (cid <= NClients) -> rproc(cid).process.sproc(cid).Process(id);

	% Create a given number of clients in parallel
	ParallelClients(n:Pos) = (n>1) -> (Client(n) || ParallelClients(Int2Pos(n-1))) <> Client(1);

	% Sends requests and waits for responses
	Client(id:Pos) = sendRequest(id).wait.receiveResponse(id).idle.Client(id);
	
% =============================================================================

init System;

